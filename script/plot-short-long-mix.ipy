#!/usr/bin/ipython3

import util
import sys

prefix = 'short-long-mix/short-long-mix-1m'
logpath = prefix + '.log'

def classifier(d):
    cond0 = d['nrMutex'] == '1000000' and d['concurrency'] == '16' and d['workload'] == 'custom' and d['shortTxMode'] == '0'
    if cond0 and (d['mode'] in ['nowait', 'wait-die', 'silo-occ', 'tictoc', 'trlock', 'trlock-occ', 'licc-pcc', 'licc-occ', 'licc-hybrid']):
        return d['mode']
    if cond0 and (d['mode'] in ['leis']):
        if d['vector'] == '0':
            return 'leis-map'
        if d['vector'] == '1':
            return 'leis-vec'
    if cond0 and (d['mode'] in ['trlock-hybrid']):
        if d['pqLockType'] == '0':
            return 'trlock-hybrid'
        if d['pqLockType'] == '4':
            return 'trlock-hybrid-pqmcs2'
    return None

def key(name, d):
    return name, int(d['longTxSize']) / int(d['nrMutex'])

dl = util.make_dictlist(logpath)
print(dl[0])
g = util.classify(dl, key, classifier)

#print(g)

def accumulate1(dl):
    commit_s = 0
    commit_l = 0
    sec = 0
    for d in dl:
        #print(d)  # QQQQQ
        commit_s += int(d['commitS'])
        commit_l += int(d['commitL'])
        concurrency = int(d['concurrency'])  # must be the same
        long_tx_size = int(d['longTxSize'])  # must be the same
        sec += int(d['sec'])

    short_tx_latency = (concurrency - 1) * sec / (commit_s * 4)
    if commit_l == 0:
        long_tx_latency = sec
    else:
        long_tx_latency = 1 * sec / (commit_l * long_tx_size)
    micro = lambda x: x * 1000000
    return [micro(short_tx_latency), micro(long_tx_latency)]

pl = util.make_plot_data(g, accumulate1)
#print(pl)
plot_path = prefix + '-latency.plot'
util.save_plot_data(pl, plot_path)


png1_path = prefix + '-latency-short.png'
png2_path = prefix + '-latency-long.png'

def make_graph_1(gp_path, plot_path):
    name_li = ['nowait', 'wait-die', 'leis-map', 'leis-vec', 'silo-occ', 'tictoc', 'trlock', 'trlock-occ', 'trlock-hybrid', 'trlock-hybrid-pqmcs2', 'licc-pcc', 'licc-occ', 'licc-hybrid']
    with open(gp_path, 'w') as f:
        print('''
set title "Short-long-mix Tx (r2w2 + rNw2) workload, 31 + 1 threads, 1m mutexes totally."
#set key top left
set key outside right reverse Left
set logscale x
set xrange [*:1.2]
set xlabel "Long Tx size / number of mutexes"
set logscale y
set grid

#lw0 = 1.2
lw0 = 2
ps0 = 1.5

set style line 1 pt 1  ps ps0 lw lw0
set style line 2 pt 2  ps ps0 lw lw0
set style line 3 pt 3  ps ps0 lw lw0
set style line 4 pt 4  ps ps0 lw lw0
set style line 5 pt 6  ps ps0 lw lw0
set style line 6 pt 8  ps ps0 lw lw0
set style line 7 pt 10 ps ps0 lw lw0
set style line 8 pt 12 ps ps0 lw lw0
set style line 9 pt 5 ps ps0 lw lw0
set style line 10 pt 7 ps ps0 lw lw0
set style line 11 pt 9 ps ps0 lw lw0
set style line 12 pt 11 ps ps0 lw lw0
set style line 13 pt 13 ps ps0 lw lw0

set ylabel "Record access latency of short Tx [usec]"
set yrange [*:50]
#set terminal png size 1024,768 font "Arial,18"
set terminal png size 1280,480 font "Arial,18"
set output "{}"
#set terminal postscript eps enhanced color solid size 10cm,10cm font "Consolas,14"
#set output "short-all.eps"

'''.format(png1_path), file=f)
        print('plot \\', file=f)
        for name, ls in zip(name_li, range(1, 100)):
            print('"< cat {} |grep \\"^{} \\"" using 2:3 title "{}" with lp ls {}, \\'.format(plot_path, name, name, ls), file=f)
        print('NaN notitle', file=f)
        print('''
set ylabel "Record access latency of long Tx [usec]"
set output "{}"
'''.format(png2_path), file=f)
        print('plot \\', file=f)
        for name, ls in zip(name_li, range(1, 100)):
            print('"< cat {} |grep \\"^{} \\"" using 2:4 title "{}" with lp ls {}, \\'.format(plot_path, name, name, ls), file=f)
        print('NaN notitle', file=f)


gp_path = prefix + '-latency.gp'
make_graph_1(gp_path, plot_path)
! gnuplot {gp_path}

